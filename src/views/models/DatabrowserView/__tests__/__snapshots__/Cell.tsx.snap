exports[`test Cell renders and runs selectCell 1`] = `
<div
  className="root"
  onClick={[Function]}
  onDoubleClick={[Function]}
  style={
    Object {
      "alignItems": "center",
      "overflow": "visible",
    }
  }>
  <div
    className="border flexAuto">
    <span
      className="value"
      onKeyDown={[Function]}
      style={
        Object {
          "cursor": "auto",
        }
      }>
      some string
    </span>
  </div>
</div>
`;

exports[`test Cell renders in edit mode 1`] = `
<div
  className="root editing"
  onClick={[Function]}
  onDoubleClick={[Function]}
  style={
    Object {
      "alignItems": "center",
      "overflow": "visible",
    }
  }>
  <div
    className="border flexAuto">
    <NullableCell
      cell={
        <function Connect(props, context) {
                _classCallCheck(this, Connect);
        
                var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));
        
                _this.version = version;
                _this.store = props.store || context.store;
        
                (0, _invariant2["default"])(_this.store, 'Could not find "store" in either the context or ' + ('props of "' + connectDisplayName + '". ') + 'Either wrap the root component in a <Provider>, ' + ('or explicitly pass "store" as a prop to "' + connectDisplayName + '".'));
        
                var storeState = _this.store.getState();
                _this.state = { storeState: storeState };
                _this.clearCache();
                return _this;
              }
          cancel={[Function]}
          field={
            Object {
              "description": "",
              "id": "cip3p48sj001e1jsmghwkdt2k",
              "isList": false,
              "isReadonly": true,
              "isSystem": true,
              "name": "description",
              "relatedModel": null,
              "typeIdentifier": "String",
            }
          }
          onKeyDown={[Function]}
          save={[Function]}
          value="some string" />
      }
      save={[Function]} />
  </div>
</div>
`;
